esphome:
  name: capture-transmit-ir
  friendly_name: Capture_Transmit_IR

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Capture-Transmit-Ir"
    password: !secret wifi_password
captive_portal:
  
web_server:
  port: 80

# Declare a variable to store the received signal
globals:
  - id: received_signal
    type: std::vector<int32_t>
    restore_value: no
    initial_value: 'std::vector<int32_t>()'
  - id: signal_ready
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: last_signal_time
    type: int
    restore_value: no
    initial_value: '0'
remote_transmitter:
  pin: D5  
  carrier_duty_percent: 50%

remote_receiver:
  id: ir_receiver
  pin: 
    number: D7 
    inverted: True  #Signal start with HIGH, so must have "inverted: True"
  dump: all
  buffer_size: 2kb  
  tolerance: 20%
  filter: 100us
  idle: 10ms  # Add pauses between signals to avoid overload
  on_raw: 
    - lambda: |-
          if (millis() - id(last_signal_time) > 500) {  // 500ms debounce
            id(received_signal) = x;  // Lưu tín hiệu vào biến toàn cục
            id(signal_ready) = true;  // Đánh dấu tín hiệu đã sẵn sàng
            id(last_signal_time) = millis();  // Cập nhật thời gian nhận tín hiệu
            ESP_LOGD("remote_receiver", "IR signal received and ready to retransmit!");
            id(retransmit_ir_signal).execute();  // Gọi script phát tín hiệu
          } else {
            ESP_LOGD("remote_receiver", "Duplicate signal ignored");
          }

# Create a separate trigger to transmit the received signal
script:
  id: retransmit_ir_signal
  then:
    - if:
        condition:
          lambda: 'return id(signal_ready);'  
        then:
          - remote_transmitter.transmit_raw:
              code: !lambda 'return id(received_signal);'
              carrier_frequency: 38kHz
          - lambda: |-
              id(signal_ready) = false;  
          - logger.log: "IR signal retransmitted successfully!"
        else:
          - logger.log: "No IR signal to retransmit!"

