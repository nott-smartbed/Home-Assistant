esphome:
  name: control-fumak-ac
  friendly_name: Control Fumak AC

esp8266:
  board: nodemcuv2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_test

ota:
  - platform: esphome
    password: !secret ota_test

captive_portal:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ir-Transmitter-Receiver"
    password: !secret wifi_password

web_server:
  port: 80
#------------------------------------------------------------------------------------------------

# LED state
switch:
  - platform: gpio
    pin: D3
    id: signal_led
    name: "LED State"

remote_transmitter:
  id: ir_transmitter
  pin: D5
  carrier_duty_percent: 50%

# IR receiver 
remote_receiver:
  pin:
    number: D7
    inverted: True
  id: ir_receiver
  dump: 
    - raw
  tolerance: 20%
  filter: 100us
  on_raw:
    then:
      - switch.turn_on: signal_led
      - delay: 50ms  # LED sáng trong 50ms giây
      - switch.turn_off: signal_led

# Globals for state management
globals:
  - id: ir_data
    type: std::vector<int>
    restore_value: no
    # Ban đầu nhiệt độ 27, power: tắt, mode: auto, swing: tắt, eco: tắt, sleep: tắt, display: tắt, timer: tắt, turbo: tắt, speed: auto
    initial_value: '{0x18, 0x27, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00}'

  - id: raw
    type: std::vector<int>
    restore_value: no
    initial_value: '{3180, -3150}'

  - id: power_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: mode_state
    type: int
    restore_value: no
    initial_value: "1"  # Auto

  - id: temperature
    type: int
    restore_value: no
    initial_value: "27"

  - id: timer_active
    type: bool
    restore_value: no
    initial_value: 'false'  
  - id: timer_wait
    type: int
    restore_value: no
    initial_value: "0"
  - id: timer_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: timer_value
    type: int
    restore_value: no
    initial_value: "0"

    #Fan speed: 1-Level 2, 2-Level 4, 4-Level 6, 8-level Auto
  - id: fan_speed
    type: int
    restore_value: no
    initial_value: "8"  # Fan speed auto

  - id: turbo_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: swing_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: eco_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: sleep_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: display_state
    type: bool
    restore_value: no
    initial_value: "true"

# Function to generate raw IR signal
script:
  - id: send_ir
    mode: queued
    then:
      - lambda: |-
          int index = 2;
          for (int byte_index = 0; byte_index < 12; byte_index++) {
            for (int bit_index = 7; bit_index >= 0; bit_index--) {
              if (id(ir_data)[byte_index] & (1 << bit_index)) {
                id(raw)[index++] = 360;
                id(raw)[index++] = -1200;
              } else {
                id(raw)[index++] = 360;
                id(raw)[index++] = -410;
              }
            }
          }
          id(raw)[index++] = 360;  // Footer
      - remote_transmitter.transmit_raw:
          code: !lambda "return id(raw);"
          carrier_frequency: 38kHz
          repeat: 
            times: 2
            wait_time: 49560 us
      - logger.log: "IR Code Sent"

# Button definitions
button:
  - platform: template
    name: "Power"
    id: power
    on_press:
      then:
        - lambda: |-
            id(power_state) = !id(power_state);
            id(ir_data)[2] = ( id(ir_data)[2] & 0b11110111 ) | ( id(power_state) ? 0b00001000 : 0x00 );
            id(send_ir).execute();

  - platform: template
    name: "Mode"
    id: mode
    on_press:
      then:
        - lambda: |-
            if (id(power_state)) {
              id(mode_state) = (id(mode_state) % 5) + 1;
              if (id(mode_state) < 4){
                id(ir_data)[2] = (id(ir_data)[2] & 0b11111000) | id(mode_state);
                if (id(mode_state) == 3) {  // Dry mode
                  id(temperature) = 24;  // Fixed to 24°C
                  id(ir_data)[2] = (id(ir_data)[2] & 0b11101111) | (24 - 16) << 4;
              }
              else if (id(mode_state) == 4) {  //Fan only
                id(ir_data)[2] = (id(ir_data)[2] & 0b11111000) | 5;
              }
              else if (id(mode_state) == 5) {  //heat
                id(ir_data)[2] = (id(ir_data)[2] & 0b11111000) | 6;
                id(fan_speed) = 8;  // Auto speed
                id(ir_data)[10] = (id(ir_data)[10] & 0b00001111) | 0b10000000;
              }

              id(send_ir).execute();
            }

  - platform: template
    name: "Up"
    id: up
    on_press:
      then:
        - lambda: |-
            if (id(power_state)) {
              if (id(mode_state) != 4) {  // Not Fan Only
                id(temperature) = clamp(id(temperature) + 1, 18, 30);
                id(ir_data)[2] = id(ir_data)[2] | ((id(temperature) - 16) << 4);
                id(send_ir).execute();
              }
            }

  - platform: template
    name: "Down"
    id: down
    on_press:
      then:
        - lambda: |-
            if (id(power_state)) {
              if (id(mode_state) != 4) {  // Not Fan Only
                id(temperature) = clamp(id(temperature) - 1, 18, 30);
                id(ir_data)[2] = id(ir_data)[2] | ((id(temperature) - 16) << 4);
                id(send_ir).execute();
              }
            }

  - platform: template
    name: "Speed"
    id: speed
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){
              id(fan_speed) = (id(fan_speed) == 8) ?  1 : (id(fan_speed) << 1);
              id(ir_data)[10] = (id(ir_data)[10] & 0b00001111) | (id(fan_speed) << 4);
              id(send_ir).execute();
            }

  - platform: template
    name: "Turbo"
    id: turbo
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){
              id(turbo_state) = !id(turbo_state);
              id(ir_data)[9] = (id(ir_data)[9] & 0b01111111) | (id(turbo_state) ? 0x00 : 0b10000000);
              id(send_ir).execute();
            }

  - platform: template
    name: "Swing"
    id: swing
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){  
              id(swing_state) = !id(swing_state);
              id(ir_data)[3] = (id(ir_data)[3] & 0b01111111) | (id(swing_state) ? 0b10000000 : 0x00);
              id(send_ir).execute();
            }

  - platform: template
    name: "Eco"
    id: eco
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){
              id(eco_state) = !id(eco_state);
              id(ir_data)[4] = (id(ir_data)[4] & 0b01111111) | (id(eco_state) ? 0b10000000 : 0x00);
              id(send_ir).execute();
            }

  - platform: template
    name: "Sleep"
    id: sleepmode
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){
              id(sleep_state) = !id(sleep_state);
              id(ir_data)[5] = (id(ir_data)[5] & 0b10111111) | (id(sleep_state) ? 0b01000000 : 0x00);
              id(send_ir).execute();
            }

  - platform: template
    name: "Timer"
    id: timer
    on_press:
      then:
        - lambda: |-
            if (id(power_state)){
              id(timer_state) = !id(timer_state);
              id(timer_value) = id(timer_state) ? 1 : 0;
              id(ir_data)[7] = (id(ir_data)[7] & 0b11110000) | id(timer_value);
              id(ir_data)[8] = (id(ir_data)[8] & 0b01111111) | (id(timer_state) ? 0b10000000 : 0x00);
              id(send_ir).execute();      
            }                           